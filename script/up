#!/usr/bin/env bash
DEBUG=${DEBUG:-}
if [ ! -z "${DEBUG}" ]; then
    set -x
fi
TEST=${TEST:-}
NAMESPACE=${NAMESPACE:-gitlab-demo}
set -euo pipefail
mkdir -p tmp

# Grab the cluster name with a default of "hpa-demo".
read -p "Cluster name: " CLUSTER_NAME
read -p "Region (nyc1|ams3|sfo2|sgp1|lon1|fra1|tor1|blr1): " REGION
read -p "Node size (s-1vcpu-2gb:3|s-2vcpu-2gb:3|s-2vcpu-4gb:3|s-4vcpu-8gb:3|s-8vcpu-16gb:3): " NODE_SIZE
read -p "Node count (number): " NODE_COUNT
read -p "Node count (number): " NODE_COUNT
read -p "K8s version (1.18.10-do.2|1.19.3-do.2): " VERSION

# Create the cluster or use the existing.
script/create-cluster ${CLUSTER_NAME}

# Grab the cluster kubeconfig.
export KUBECONFIG="tmp/${CLUSTER_NAME}-kubeconfig.yaml"

# Get the API_URL
API_URL="$(kubectl cluster-info | grep 'Kubernetes master' | awk '/http/ {print $NF}')"
echo -e "\nAPI URL:\n${API_URL}"

# Get the CA certificate
CA_CERT="$(kubectl get secret $(kubectl get secrets | grep default-token- | awk '{print $1}') -o jsonpath="{['data']['ca\.crt']}" | base64 --decode)"
echo -e "\nCA Certificate:\n${CA_CERT}"

# Create the service account.
if ! kubectl get serviceaccounts -n kube-system | grep gitlab-admin  &> /dev/null; then
    kubectl apply -f gitlab/gitlab-admin-service-account.yaml
fi

# Get the service token
TOKEN="$(kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep gitlab-admin | awk '{print $1}') | grep token: | awk '{print $2}')"
echo -e "\nService Token:\n${TOKEN}"

# Success.
echo -e "\nAPI URL, CA certificate and Service Token are the values used to add an existing Kubernetes cluster in GitLab ðŸŽ‰"
